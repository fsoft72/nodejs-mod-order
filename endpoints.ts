/*
 * This file has been generated by flow2code
 * See: https://flow.liwe.org
 */

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	// endpoints function
	delete_order_admin_del, delete_order_admin_del_real, delete_order_item_del, get_order_admin_details, get_order_admin_list,
	get_order_cart, get_order_details, get_order_list, patch_order_admin_fields, patch_order_admin_update,
	post_order_add, post_order_admin_add, post_order_admin_tag, post_order_transaction_failed, post_order_transaction_start,
	post_order_transaction_success, post_order_transaction_update,
	// functions
	order_db_init, order_get_by_transaction_id, order_get_full, order_payment_cancelled, order_payment_completed,
	order_transaction_start, order_transaction_update,
} from './methods';

import {
	Order, OrderFull, OrderFullKeys, OrderItem, OrderItemKeys,
	OrderKeys, OrderPaymentLog, OrderPaymentLogKeys, OrderPaymentStatus, OrderPaymentStatusObj,
	OrderStatus, OrderStatusObj,
} from './types';

/*=== f2c_start __header ===*/

/*=== f2c_end __header ===*/

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - order " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "order", l ) );
	order_db_init ( liwe );

	app.post ( '/api/order/admin/add', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { prod_code, qnt, id_user, ___errors } = typed_dict( req.body, [
			{ name: "prod_code", type: "string", required: true },
			{ name: "qnt", type: "number", required: true, default: 1 },
			{ name: "id_user", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_admin_add ( req, prod_code, qnt, id_user, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.patch ( '/api/order/admin/update', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, name, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "name", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_order_admin_update ( req, id, name, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.patch ( '/api/order/admin/fields', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, data, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "data", type: "any", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_order_admin_fields ( req, id, data, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.get ( '/api/order/admin/list', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { skip, rows, ___errors } = typed_dict( req.query as any, [
			{ name: "skip", type: "number" },
			{ name: "rows", type: "number" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_order_admin_list ( req, skip, rows, ( err: ILError, orders: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { orders } );
		} );
	} );

	app.delete ( '/api/order/admin/del', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_order_admin_del ( req, id, ( err: ILError, id: string ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { id } );
		} );
	} );

	app.post ( '/api/order/admin/tag', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, tags, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "tags", type: "string[]", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_admin_tag ( req, id, tags, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.post ( '/api/order/add', perms( [ "is-logged" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { prod_code, qnt, single, ___errors } = typed_dict( req.body, [
			{ name: "prod_code", type: "string", required: true },
			{ name: "qnt", type: "number", required: true, default: 1 },
			{ name: "single", type: "boolean" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_add ( req, prod_code, qnt, single, ( err: ILError, order: OrderFull ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.get ( '/api/order/details', ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.query as any, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_order_details ( req, id, ( err: ILError, order: OrderFull ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.get ( '/api/order/list', ( req: ILRequest, res: ILResponse ) => {
		const { rows, skip, ___errors } = typed_dict( req.query as any, [
			{ name: "rows", type: "number" },
			{ name: "skip", type: "number" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_order_list ( req, rows, skip, ( err: ILError, orders: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { orders } );
		} );
	} );

	app.get ( '/api/order/cart', perms( [ "is-logged" ] ), ( req: ILRequest, res: ILResponse ) => {
		

		get_order_cart ( req, ( err: ILError, order: OrderFull ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.delete ( '/api/order/item/del', perms( [ "is-logged" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id_order, id_item, ___errors } = typed_dict( req.body, [
			{ name: "id_order", type: "string", required: true },
			{ name: "id_item", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_order_item_del ( req, id_order, id_item, ( err: ILError, order: OrderFull ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.post ( '/api/order/transaction/start', ( req: ILRequest, res: ILResponse ) => {
		const { id_order, challenge, payment_mode, transaction_id, session_id, ___errors } = typed_dict( req.body, [
			{ name: "id_order", type: "string", required: true },
			{ name: "challenge", type: "string", required: true },
			{ name: "payment_mode", type: "string", required: true },
			{ name: "transaction_id", type: "string", required: true },
			{ name: "session_id", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_transaction_start ( req, id_order, challenge, payment_mode, transaction_id, session_id, ( err: ILError, log: OrderPaymentLog ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { log } );
		} );
	} );

	app.post ( '/api/order/transaction/update', ( req: ILRequest, res: ILResponse ) => {
		const { challenge, payment_mode, transaction_id, session_id, event_name, data, ___errors } = typed_dict( req.body, [
			{ name: "challenge", type: "string", required: true },
			{ name: "payment_mode", type: "string", required: true },
			{ name: "transaction_id", type: "string", required: true },
			{ name: "session_id", type: "string" },
			{ name: "event_name", type: "string" },
			{ name: "data", type: "any" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_transaction_update ( req, challenge, payment_mode, transaction_id, session_id, event_name, data, ( err: ILError, log: OrderPaymentLog ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { log } );
		} );
	} );

	app.post ( '/api/order/transaction/success', ( req: ILRequest, res: ILResponse ) => {
		const { challenge, transaction_id, session_id, payment_mode, ___errors } = typed_dict( req.body, [
			{ name: "challenge", type: "string", required: true },
			{ name: "transaction_id", type: "string", required: true },
			{ name: "session_id", type: "string" },
			{ name: "payment_mode", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_transaction_success ( req, challenge, transaction_id, session_id, payment_mode, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.post ( '/api/order/transaction/failed', ( req: ILRequest, res: ILResponse ) => {
		const { challenge, transaction_id, session_id, payment_mode, ___errors } = typed_dict( req.body, [
			{ name: "challenge", type: "string", required: true },
			{ name: "transaction_id", type: "string", required: true },
			{ name: "session_id", type: "string" },
			{ name: "payment_mode", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_order_transaction_failed ( req, challenge, transaction_id, session_id, payment_mode, ( err: ILError, order: Order ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.get ( '/api/order/admin/details', perms( [ "is-logged" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.query as any, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_order_admin_details ( req, id, ( err: ILError, order: OrderFull ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { order } );
		} );
	} );

	app.delete ( '/api/order/admin/del/real', perms( [ "order.add" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_order_admin_del_real ( req, id, ( err: ILError, id: string ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { id } );
		} );
	} );

};
